import os
from abc import ABC, abstractmethod

# Componente base
class ArchivoComponent(ABC):

    @abstractmethod
    def get_nombre(self):
        pass

    @abstractmethod
    def get_tama√±o(self):
        pass

    @abstractmethod
    def mostrar(self, indentacion):
        pass

    @abstractmethod
    def crear_en_sistema(self, ruta_base):
        pass


# Hoja: Archivo individual
class Archivo(ArchivoComponent):
    def __init__(self, nombre, tama√±o):
        self.nombre = nombre
        self.tama√±o = tama√±o

    def get_nombre(self):
        return self.nombre

    def get_tama√±o(self):
        return self.tama√±o

    def mostrar(self, indentacion):
        print(f"{indentacion}üìÑ Archivo: {self.nombre} ({self.tama√±o} bytes)")

    def crear_en_sistema(self, ruta_base):
        ruta_completa = os.path.join(ruta_base, self.nombre)
        with open(ruta_completa, 'w') as f:
            f.write("Contenido simulado del archivo.\n")
        print(f"‚úÖ Archivo creado: {ruta_completa}")


# Compuesto: Carpeta
class Carpeta(ArchivoComponent):
    def __init__(self, nombre):
        self.nombre = nombre
        self.hijos = []

    def get_nombre(self):
        return self.nombre

    def get_tama√±o(self):
        tama√±o_total = sum(componente.get_tama√±o() for componente in self.hijos)
        return tama√±o_total

    def a√±adir(self, componente):
        self.hijos.append(componente)

    def eliminar(self, componente):
        self.hijos.remove(componente)

    def mostrar(self, indentacion):
        print(f"{indentacion}üìÅ Carpeta: {self.nombre} ({self.get_tama√±o()} bytes)")
        for componente in self.hijos:
            componente.mostrar(indentacion + "    ")

    def crear_en_sistema(self, ruta_base):
        ruta_actual = os.path.join(ruta_base, self.nombre)
        os.makedirs(ruta_actual, exist_ok=True)
        print(f"üìÅ Carpeta creada: {ruta_actual}")
        for componente in self.hijos:
            componente.crear_en_sistema(ruta_actual)


# Cliente
if __name__ == "__main__":
    # Crear estructura l√≥gica
    raiz = Carpeta("Ra√≠z")

    documentos = Carpeta("Documentos")
    imagenes = Carpeta("Im√°genes")
    proyectos = Carpeta("Proyectos")

    archivo1 = Archivo("documento.txt", 100)
    archivo2 = Archivo("foto.jpg", 2000)
    archivo3 = Archivo("config.xml", 300)
    archivo4 = Archivo("main.py", 150)
    archivo5 = Archivo("README.md", 50)

    documentos.a√±adir(archivo1)
    documentos.a√±adir(archivo3)
    imagenes.a√±adir(archivo2)
    proyectos.a√±adir(archivo4)
    proyectos.a√±adir(archivo5)
    documentos.a√±adir(proyectos)

    raiz.a√±adir(documentos)
    raiz.a√±adir(imagenes)

    # Mostrar estructura l√≥gica
    print("üìÇ Estructura del Archivador:")
    raiz.mostrar("")

    print(f"\nüì¶ Tama√±o total: {raiz.get_tama√±o()} bytes")

    # Crear en sistema de archivos
    print("\nüìÅ Creando estructura en el sistema de archivos...")
    ruta_destino = os.path.join(os.getcwd(), "estructura_archivador")
    raiz.crear_en_sistema(ruta_destino)
    print(f"\n‚úÖ Estructura creada en: {ruta_destino}")


